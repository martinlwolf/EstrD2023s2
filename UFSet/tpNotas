El procedimiento FIND encuentra el elemento especial (uno solo) dentro de un conjunto determinado. Si el elemento especial es c y a esta en c, si se pone find(a) se devuelve el conjunto c
Si se pone find(c) tambien se devuelve el conjunto c.

El procedimiento UNION une 2 conjuntos eligiendo el elemento distinguido de entre los que hay en los conjuntos de la union.

El ufset se representa con un arbol ordenado, en la raiz esta el elemento distinguido. Cuando se une con otro elemento, la raiz de uno de los conjuntos pasa a ser la raiz
del nuevo conjunto (elemento distinguido)

Para hacer la union la raiz debe ser del arbol de mayor rango(1ra opt). El rango se determina por la longitud de la rama mas larga.
Agregar valor rango en UFSet. En un conjunto unitario, el rango arranca de 0. Codear que si los distinguidos son iguales, no se une
para que no se modifique el rango.

Una vez que se hace un find, ya se sabe cual va a ser el resultado del find (2da opt). Se evita recorrer todo el ufset hasta llegar
al distinguido y setearlo como padre.
Primero hay que recorrer una vez hasta el distinguido y setearlo en el primero pedido, luego hay que recorrer otra vez para comprimir todo.
Al final de esta optimizacion los elementos no van a tener relacion entre si, solo con el padre (distinguido).

La raiz no conoce a sus hijos, por eso tampoco conoce el rango(implementar). Si se agrega 1 elemento como hijo, le tiene que avisar a su padre que se aumenta el rango
en caso de ser necesario (tambien se puede hacer de que se recorra para abajo desde la raiz para conocer el rango.

Cambiar el null por referencia a si mismo en el padre.

INV REP
-Todo UFSet tiene un padre, por lo que el padre de cada uno no puede ser NULL en ningun caso.
-El elemento de un UFSet tampoco puede ser NULL, por lo que el UFSet nunca puede ser vacio.
-El rango solo puede incrementar, en ningun caso puede ser negativo, y siempre es 0 cuando se crea el UFSet.
